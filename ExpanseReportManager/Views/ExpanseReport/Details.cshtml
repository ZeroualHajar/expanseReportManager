@using ExpanseReportManager.Models
@using Microsoft.AspNet.Identity
@model ExpanseReportManager.Models.ExpanseReportViewModels

@if(Model.Employee.UserId != User.Identity.GetUserId() && Model.Employee.Pole.Manager.UserId != User.Identity.GetUserId() && !User.IsInRole("Comptable") && !User.IsInRole("Ressource Humaine") && !User.IsInRole("SuperAdmin"))
{
    Response.Redirect("~/Error/BadCredential");
}

@{
    ViewBag.Title = "Details";
}

<h2>Detail de la note de frais de @Model.Month/@Model.Year</h2>


<div class="details">
    <div class="row">
        <div class="col col-md-offset-1 col-md-4">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">La note de frais</h3>
                </div>
                <div class="panel-body">
                    <b>@Html.DisplayNameFor(model => model.Author) :</b> @Html.DisplayFor(model => model.Author.FirstName) @Html.DisplayFor(model => model.Author.LastName)<br />
                    <b>@Html.DisplayNameFor(model => model.Employee) :</b> @Html.DisplayFor(model => model.Employee.FirstName) @Html.DisplayFor(model => model.Employee.LastName)<br />
                    <b>@Html.DisplayNameFor(model => model.CreationDate) :</b> @Html.DisplayFor(model => model.CreationDate) <br />
                    <b>@Html.DisplayNameFor(model => model.StatusCode) :</b> @Html.Partial("_DisplayStatusCode", Model)<br />
                </div>
            </div>
        </div>

        <div class="col col-md-offset-1 col-md-4">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">Statut et suivie</h3>
                </div>

                <div class="panel-body">
                    <b>@Html.DisplayNameFor(model => model.ManagerValidationDate) :</b> @Html.DisplayFor(model => model.ManagerValidationDate)<br />
                    <b>@Html.DisplayNameFor(model => model.AccountingValidationDate) :</b> @Html.DisplayFor(model => model.AccountingValidationDate)<br />
                    <b>@Html.DisplayNameFor(model => model.ManagerComment) :</b> @Html.DisplayFor(model => model.ManagerComment)<br />
                    <b>@Html.DisplayNameFor(model => model.AccountingComment) :</b> @Html.DisplayFor(model => model.AccountingComment)<br />
                </div>
            </div>
        </div>

        <div class="col col-md-offset-1 col-md-9">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">Frais</h3>
                </div>

                <div class="panel-body">
                    @if (Model.StatusCode == ExpanseReportViewModels.STATUS_DRAFT || Model.StatusCode == ExpanseReportViewModels.STATUS_MANAGER_NEED_CORRECTION || Model.StatusCode == ExpanseReportViewModels.STATUS_ACCOUNTING_NEED_CORRECTION)
                    {
                        <button class="btn btn-raised btn-success" id="addExpans" data-toogle="modal" data-target="#modalAdd">Ajouter</button>
                    }
                    else
                    {
                        @Html.ActionLink("Exporter en PDF", "ExportPDF", new { id = Model.ExpanseReport_ID}, new { @class = "btn btn-success btn-sm btn-raised", target = "_blank" })
                    }

                    <div id="expanses-list">
                        @Html.Partial("../Expans/_ExpansTable", Model.Expanses)
                    </div>

                </div>
            </div>
        </div>

        @Html.Partial("_DisplayAction", Model)
    </div>

    <p>
        @Html.ActionLink("Retour à la liste", "Index", null, new { @class = "btn btn-primary btn-sm" })
    </p>
</div>

<div id="divModalAdd">
    @Html.Partial("../Expans/_FormCreateExpanse", new ExpansViewModels()
    {
        ExpanseReport_ID = Model.ExpanseReport_ID
    })
</div>

@using (Ajax.BeginForm("UpdateExpansList", "Expans", null, new AjaxOptions
{
    HttpMethod = "GET",
    InsertionMode = InsertionMode.Replace,
    UpdateTargetId = "expanses-list",
    OnFailure = "updateListFail"
}, new { id = "getExpansList" }))
{
    <div class="form-group">
        <input type="hidden" id="id" name="id" value="@Model.ExpanseReport_ID"/>
    </div>
}


@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/snackbar")

    <script type="text/javascript">

        $(document).ready(function () {
            $(document).on("click", ".modal-delete, .modal-edit", function () {
                $($(this).attr("data-target")).modal();
            });

            $("#addExpans").click(function () {
                $($(this).attr("data-target")).modal();
            });

            setProjectList();

            $("#expanseTypeForAmount").val($("#ExpanseType_ID").val());
            $("#formGetAmountField").submit();

            $("#Customer_ID").change(function () {
                setProjectList();
            });

            $(document).on("change", "#ExpanseType_ID", function () {
                $("#expanseTypeForAmount").val($("#ExpanseType_ID").val());
                $("#formGetAmountField").submit();
            });

            $(document).on('focus', '#Amount_HT', function () {
                $("#Project_ID").val($("#Project").val());
            });
            $(document).on('change', '#Project', function () {
                $("#Project_ID").val($("#Project").val());
            });

        });

        function setProjectList() {
            $("#projectIdForSelect").val($("#Customer_ID").val());
            $("#formGetProject").submit();
        }

        function updateProject() {
            $("#Project_ID").val($("#Project").val());
        }

        function addFaillure(data) {
            console.log(data);
        }

        function addSuccess(data) {
            $("#modalAdd").modal("hide");
            $('body').removeClass('modal-open');
            $('.modal-backdrop').remove();
            setProjectList();

            if (data.indexOf("field-validation-error") > -1) {
                $("#modalAdd").modal();
                $.validator.unobtrusive.parse($(data));

                var options = {
                    content: "Erreur de validation de données",
                    style: "redToast",
                    timeout: 3000
                }

                $.snackbar(options);

                return;
            }

            var options = {
                content: "Ajout réussie",
                style: "greenToast",
                timeout: 3000
            }

            $.snackbar(options);

            $("#getExpansList").submit();
        }

        function askCorrectionSuccess(data) {
            if (data.hasError == true) {
                var options = {
                    content: data.error,
                    style: "redToast",
                    timeout: 5000
                }
                $.snackbar(options);
            } else {
                window.location.href = "@Url.Action("Index", "ExpanseReport")";
            }
        }

        function askCorrectionFaillure(data) {
            console.log(data)
            var options = {
                content: data.error,
                style: "redToast",
                timeout: 3000
            }

            $.snackbar(options);
        }

        function updateListFail(data) {
            console.log(data);
        }

        function closeModal(data, id) {
            $("#" + id).modal("hide");
            $('body').removeClass('modal-open');
            $('.modal-backdrop').remove();

            var text = "Fermeture modal";
            if (data.action == "removed") {
                text = "Suppression";
            }
            else {
                text = "Modification";
            }

            if (data.removed == true) {
                var options = {
                    content: text + " réussie",
                    style: "greenToast",
                    timeout: 3000
                }
            }
            else {
                var options = {
                    content: text + " échoué" + data.error,
                    style: "redToast",
                    timeout: 3000
                }
            }
            $("#getExpansList").submit();

            $.snackbar(options);
        }


    </script>
}

@section styles
{
    @Styles.Render("~/Content/snackbar")
}






